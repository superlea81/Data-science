****Python Brute Force**
```
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return [i, j]
```
**Java Brute Force**
```
public int[] twoSum(int[] nums, int target) {
    for (int i = 0; i < nums.length; i++) {
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[j] == target - nums[i]) {
                return new int[] { i, j };
            }
        }
    }
    throw new IllegalArgumentException("No two sum solution");
}

```
Time complexity: O(n2)
Space complexity: O(n)

**Java Hash Table**
```
class solution{
    public int[] twoSum(int[] nums, int target){
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++){
            map.put(nums[i], i);    //put all elements into the HashMap
        }
        for (int i = 0; i < nums.length; i++){
            int diff = target - nums[i];
            if (map.containsKey(diff) && map.get(diff) != i){
                return new int[] {i, map.get(diff)};
            }
        }
    throw new IllegalArgumentException("No Solution");
    }
}
```
Runtime: 2 ms, faster than 67.71% of Java online submissions for Two Sum.
Memory Usage: 39.6 MB, less than 66.36% of Java online submissions for Two Sum.
